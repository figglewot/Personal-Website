
@{
    ViewBag.Title = "Automation is a Good Thing";
}

<div class="col-md-12" id="blogSectionMini">
    <article>
        <h3>@ViewBag.Title</h3>
        <h5>Oct 2 2015</h5>
        <p>
            In the world of software and computer science, we treat automation like a holy grail. Everyone wants to achieve it, but we always struggle with the
            business to implement it. I'd like to use this post to talk a bit about the Paradox of Automation, justifications for automation, and how it can help
            your business in an array of ways.
        </p>
        <b>What is the Paradox of Automation?</b>
        <p>
            The Paradox of Automation states that while reducing human time to perform a task, human interaction with the Automata becomes crucial. We will spend
            less time doing the task but spend more time developing, improving, and repairing the automata. This is a good thing. We want to spend less time doing
            the same repetative tasks over and over again and spend more of our time creating ways to rid ourselves of the tedious tasks we perform without much thought.
        </p>
        <b>The Business Cost</b>
        <p>
            Everytime I have brought up the question of building automation in to our solutions the questions have always been something like:
        </p>
        <p>
            <ol>
                <li>What is this going to cost me?</li>
                <li>How much time will you need to spend on this?</li>
                <li>What is the value add?</li>
                <li>When can I see results?</li>
            </ol>
        </p>
        <p>
            These questions are pretty fair, and they are subjective to the skillsets of your team and sort of automata your team wants to implement. In the case of the
            automation consulting I provide to software testing teams, the answers to these questions are a bit more subjective to the sort of software they are testing.
        </p>
        <p>
            For example, the cost would be as much as the vendor solutions the team choses to use, with many free open-source tools available such as Selenium.
            The amount of time needed is relative, and a good way to guage this is to start by automating a small task. That small task can be anything as broad as something
            that your team does often enough to be tired of doing, or something as specific as a build acceptance test that you want to automate. Once that task is complete,
            now you have a few things at your disposal to bring to management.
        </p>
        <p>
            You have metrics. These are pieces of data that managers and business-y type people use to visualize time spent and time saved on tasks.
        </p>
        <p>
            You have a working example. With that, you can now demonstrate at a high level what you can achieve through automation. What I have found is that
            managers never fully realize what they are dealing with until they see it work, and once they see it work they accept how awesome it is and want more. You have
            a foundation. Once you get your feet wet with building the first working cog, the rest will fall into place faster and nicer.
        </p>
        <b>Why does Human Interaction Become More Crucial?</b>
        <p>
            Automation is a very cool paradox. Take the instance of automobiles for example. Automobiles have become a very important factor in today's world.
            We use them in our lives daily to get from home to where ever we need to go and back. But they break, they wear out, they fall short of many conveniences.
            Because of that, we need repair shops and constant innovations engineering new designs. As Humans, we constantly want more and we constantly want better,
            it is just our nature.
        </p>
        <p>
            The same is the case for automation in the software world. For each Automata we build, there will always be ways to make it better and there will always
            be the need to fix it. This sounds a bit counter-productive, spending so much time and investing more and more into the thing that was supposed to save
            us time from the tasks we were doing, why not just stick to manually doing those tasks?
        </p>
        <p>
            We will always have more and more work to do. By developing automata to take on the majority of our redundant work loads, we can dedicate a smaller pool
            of resources to working with the automata and focus on new work that hasn't yet been included into it. This saves us from having to add more and more
            physical bodies to our software teams. And, subjectively, just make us happier people in general.
        </p>
        <b>What are the up-front costs?</b>
        <p>
            If this is your team's first time in dealing with automation in any fashion, it is going to seem expensive. This is because, like any other product or project,
            there is always an investment required before you can see your return. It will require you to spend some time on research and development to get off the ground
            into kinetic motion. The return on investment can be quickly seen, however. Some advice in the realm of software testing is to start early. If you have a project
            that it is in its infacy, it is very important that you build automation in to your SDLC and work with your fellow developers to ensure it is a priority, as it will
            save you a vast amount of time and money later on.
        </p>
        <p>
            When talking about up-front costs of automation in any instance, treat it as merely a shadowed veil with the big treasure chest containing the dungeon item on the
            other side.
        </p>
        <b>This All Sounds Risky, is it Really for Me?</b>
        <p>
            I think the biggest factor that shuts out automation is fear of failure either due to previous attempts or the unknown. I have seen fear become a blocker countless
            times. If your team has given an automated solution for your manual tasks a try and the past, now is a great time to reflect on that failure and figure out what
            caused it to fail and analyze the why. If your team has not given an automated solution for your manual tasks a try yet, give it a go. Take initial steps to analyze
            what you want to automate, what technology you want to use to do the automation. Put together some small working proof of concepts. It is ok to involve one or two
            resources initially, but DO involve more overtime and DO educate the team on what it is, how to work with it, how to extend it, how to understand it. This is crucial
        </p>
        <b>Automate, Automate, Automate</b>
        <p>
            In the past, present, and future, automation is an essential ally to us all. It is imperative that teams develop new strategies, revisit old ones, and constantly
            innovate automation.
        </p>
        <p>
            Also, Open Source all the things :) - Shameless plug from a 'dirty' .NET developer.
        </p>
    </article>
    @*<i class="fa fa-angle-double-left fa-1x" id="returnButton">@Html.ActionLink("Go Back", "Index", "Home")</i>*@
    <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES * * */
        var disqus_shortname = 'awrightblog';

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function () {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>
</div>

